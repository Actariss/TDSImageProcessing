package isilimageprocessing;

import CImage.*;
import CImage.Exceptions.*;
import CImage.Observers.*;
import CImage.Observers.Events.*;
import ImageProcessing.Applications.Applications;
import ImageProcessing.Complexe.MatriceComplexe;
import ImageProcessing.Contours.ContoursLineaire;
import ImageProcessing.Contours.ContoursNonLineaire;
import ImageProcessing.Fourier.Fourier;
import ImageProcessing.Histogramme.Histogramme;
import ImageProcessing.Lineaire.*;
import ImageProcessing.NonLineaire.MorphoComplexe;
import ImageProcessing.NonLineaire.MorphoElementaire;
import ImageProcessing.Seuillage.Seuillage;
import ImageProcessing.Utils.Utils;
import isilimageprocessing.Dialogues.*;
import java.awt.*;
import java.io.*;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author  HP_Propriï¿½taire
 */
public class IsilImageProcessing extends javax.swing.JFrame implements ClicListener,SelectLigneListener,SelectRectListener,SelectRectFillListener,SelectCercleListener,SelectCercleFillListener 
{
    private CImageRGB imageRGB;
    private CImageNG  imageNG;
    
    private JLabelBeanCImage observer;
    private Color couleurPinceauRGB;
    private int   couleurPinceauNG;
    
    /** Creates new form TestCImage2 */
    public IsilImageProcessing() 
    {
        initComponents();
        
        imageRGB = null;
        imageNG  = null;
        
        observer = new JLabelBeanCImage();
        observer.addClicListener(this);
        observer.addSelectLigneListener(this);
        observer.addSelectRectListener(this);
        observer.addSelectRectFillListener(this);
        observer.addSelectCercleListener(this);
        observer.addSelectCercleFillListener(this);
        observer.setMode(JLabelBeanCImage.INACTIF);
        jScrollPane.setViewportView(observer);
        
        jMenuDessiner.setEnabled(false);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);
        
        couleurPinceauRGB = Color.BLACK;
        couleurPinceauNG = 0;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupDessiner = new javax.swing.ButtonGroup();
        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuImage = new javax.swing.JMenu();
        jMenuNouvelle = new javax.swing.JMenu();
        jMenuItemNouvelleRGB = new javax.swing.JMenuItem();
        jMenuItemNouvelleNG = new javax.swing.JMenuItem();
        jMenuOuvrir = new javax.swing.JMenu();
        jMenuItemOuvrirRGB = new javax.swing.JMenuItem();
        jMenuItemOuvrirNG = new javax.swing.JMenuItem();
        jMenuItemEnregistrerSous = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuQuitter = new javax.swing.JMenuItem();
        jMenuDessiner = new javax.swing.JMenu();
        jMenuItemCouleurPinceau = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jCheckBoxMenuItemDessinerPixel = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerLigne = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectangle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectanglePlein = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCercle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCerclePlein = new javax.swing.JCheckBoxMenuItem();
        jMenuFourier = new javax.swing.JMenu();
        jMenuFourierAfficher = new javax.swing.JMenu();
        jMenuItemFourierAfficherModule = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPhase = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieReelle = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieImaginaire = new javax.swing.JMenuItem();
        jMenuHistogramme = new javax.swing.JMenu();
        jMenuHistogrammeAfficher = new javax.swing.JMenuItem();
        javax.swing.JMenuItem jMenuItemAfficherParametres = new javax.swing.JMenuItem();
        jMenuItemTransformationLineaire = new javax.swing.JMenuItem();
        jMenuItemTransformationLineaireSaturation = new javax.swing.JMenuItem();
        jMenuItemCorrectionGamma = new javax.swing.JMenuItem();
        jMenuItemNegatif = new javax.swing.JMenuItem();
        jMenuItemEgalisationHistogramme = new javax.swing.JMenuItem();
        jMenuFiltrageLineaire = new javax.swing.JMenu();
        jMenuGlobal = new javax.swing.JMenu();
        jMenuItemPasseBasIdeal = new javax.swing.JMenuItem();
        jMenuItemPasseHautIdeal = new javax.swing.JMenuItem();
        jMenuItemPasseBasButterworth = new javax.swing.JMenuItem();
        jMenuItemPasseHautButterworth = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuFiltrageNonLineaire = new javax.swing.JMenu();
        jMenuMorphoElementaire = new javax.swing.JMenu();
        jMenuItemErosion = new javax.swing.JMenuItem();
        jMenuItemDilatation = new javax.swing.JMenuItem();
        jMenuItemOuverture = new javax.swing.JMenuItem();
        jMenuItemFermeture = new javax.swing.JMenuItem();
        jMenuMorphoComplexe = new javax.swing.JMenu();
        jMenuItemDilatationGeo = new javax.swing.JMenuItem();
        jMenuItemReconstructionGeo = new javax.swing.JMenuItem();
        jMenuItemFiltreMedian = new javax.swing.JMenuItem();
        jMenuContours = new javax.swing.JMenu();
        jMenuContoursLineaire = new javax.swing.JMenu();
        jMenuItemGradientPrewitt = new javax.swing.JMenuItem();
        jMenuItemGradientSobel = new javax.swing.JMenuItem();
        jMenuItemLaplacien4 = new javax.swing.JMenuItem();
        jMenuItemLaplacien8 = new javax.swing.JMenuItem();
        jMenuContoursNonLineaire = new javax.swing.JMenu();
        jMenuItemGradientErosion = new javax.swing.JMenuItem();
        jMenuItemGradientDilatation = new javax.swing.JMenuItem();
        jMenuItemGradientBeucher = new javax.swing.JMenuItem();
        jMenuItemLaplacienNonLin = new javax.swing.JMenuItem();
        jMenuSeuillage = new javax.swing.JMenu();
        jMenuItemSeuillageSimple = new javax.swing.JMenuItem();
        jMenuItemSeuillageDouble = new javax.swing.JMenuItem();
        jMenuItemSeuillageAutomatique = new javax.swing.JMenuItem();
        jMenuApplications = new javax.swing.JMenu();
        jMenuItemApplication1 = new javax.swing.JMenuItem();
        jMenuItemApplication2 = new javax.swing.JMenuItem();
        jMenuItemApplication3 = new javax.swing.JMenuItem();
        jMenuItemApplication4 = new javax.swing.JMenuItem();
        jMenuItemApplication5 = new javax.swing.JMenuItem();
        jMenuItemApplication6 = new javax.swing.JMenuItem();
        jMenuItemApplication7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Isil Image Processing");

        jMenuImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Net 13_p1.jpg"))); // NOI18N
        jMenuImage.setText("Image");

        jMenuNouvelle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/File 65_p3.jpg"))); // NOI18N
        jMenuNouvelle.setText("Nouvelle");

        jMenuItemNouvelleRGB.setText("Image RGB");
        jMenuItemNouvelleRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleRGBActionPerformed(evt);
            }
        });
        jMenuNouvelle.add(jMenuItemNouvelleRGB);

        jMenuItemNouvelleNG.setText("Image NG");
        jMenuItemNouvelleNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleNGActionPerformed(evt);
            }
        });
        jMenuNouvelle.add(jMenuItemNouvelleNG);

        jMenuImage.add(jMenuNouvelle);

        jMenuOuvrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Folder 036_p3.jpg"))); // NOI18N
        jMenuOuvrir.setText("Ouvrir");

        jMenuItemOuvrirRGB.setText("Image RGB");
        jMenuItemOuvrirRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirRGBActionPerformed(evt);
            }
        });
        jMenuOuvrir.add(jMenuItemOuvrirRGB);

        jMenuItemOuvrirNG.setText("Image NG");
        jMenuItemOuvrirNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirNGActionPerformed(evt);
            }
        });
        jMenuOuvrir.add(jMenuItemOuvrirNG);

        jMenuImage.add(jMenuOuvrir);

        jMenuItemEnregistrerSous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/DD 27_p3.jpg"))); // NOI18N
        jMenuItemEnregistrerSous.setText("Enregistrer sous...");
        jMenuItemEnregistrerSous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEnregistrerSousActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuItemEnregistrerSous);
        jMenuImage.add(jSeparator1);

        jMenuQuitter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 59_p3.jpg"))); // NOI18N
        jMenuQuitter.setText("Quitter");
        jMenuQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuQuitterActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuQuitter);

        jMenuBar1.add(jMenuImage);

        jMenuDessiner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Display 28_p1.jpg"))); // NOI18N
        jMenuDessiner.setText("Dessiner");

        jMenuItemCouleurPinceau.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Display 14_p3.jpg"))); // NOI18N
        jMenuItemCouleurPinceau.setText("Couleur");
        jMenuItemCouleurPinceau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCouleurPinceauActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jMenuItemCouleurPinceau);
        jMenuDessiner.add(jSeparator2);

        jCheckBoxMenuItemDessinerPixel.setText("Pixel");
        jCheckBoxMenuItemDessinerPixel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerPixelActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerPixel);

        jCheckBoxMenuItemDessinerLigne.setText("Ligne");
        jCheckBoxMenuItemDessinerLigne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerLigneActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerLigne);

        jCheckBoxMenuItemDessinerRectangle.setText("Rectangle");
        jCheckBoxMenuItemDessinerRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectangleActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectangle);

        jCheckBoxMenuItemDessinerRectanglePlein.setText("Rectangle plein");
        jCheckBoxMenuItemDessinerRectanglePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectanglePlein);

        jCheckBoxMenuItemDessinerCercle.setText("Cercle");
        jCheckBoxMenuItemDessinerCercle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCercleActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerCercle);

        jCheckBoxMenuItemDessinerCerclePlein.setText("Cercle plein");
        jCheckBoxMenuItemDessinerCerclePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCerclePleinActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerCerclePlein);

        jMenuBar1.add(jMenuDessiner);

        jMenuFourier.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 51_p1.jpg"))); // NOI18N
        jMenuFourier.setText("Fourier");

        jMenuFourierAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 51_p3.jpg"))); // NOI18N
        jMenuFourierAfficher.setText("Afficher");

        jMenuItemFourierAfficherModule.setText("Module");
        jMenuItemFourierAfficherModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherModuleActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherModule);

        jMenuItemFourierAfficherPhase.setText("Phase");
        jMenuItemFourierAfficherPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPhaseActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPhase);

        jMenuItemFourierAfficherPartieReelle.setText("Partie Reelle");
        jMenuItemFourierAfficherPartieReelle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieReelleActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieReelle);

        jMenuItemFourierAfficherPartieImaginaire.setText("Partie Imaginaire");
        jMenuItemFourierAfficherPartieImaginaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieImaginaireActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieImaginaire);

        jMenuFourier.add(jMenuFourierAfficher);

        jMenuBar1.add(jMenuFourier);

        jMenuHistogramme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_48_hot.jpg"))); // NOI18N
        jMenuHistogramme.setText("Histogramme");

        jMenuHistogrammeAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg"))); // NOI18N
        jMenuHistogrammeAfficher.setText("Afficher");
        jMenuHistogrammeAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeAfficherActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeAfficher);

        jMenuItemAfficherParametres.setText("Afficher les paramÃ¨tres de lâimage ");
        jMenuItemAfficherParametres.setToolTipText("");
        jMenuItemAfficherParametres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAfficherParametresActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuItemAfficherParametres);

        jMenuItemTransformationLineaire.setText("Transformation linÃ©aire");
        jMenuItemTransformationLineaire.setToolTipText("");
        jMenuItemTransformationLineaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTransformationLineaireActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuItemTransformationLineaire);

        jMenuItemTransformationLineaireSaturation.setText("Transformation linÃ©aire avec saturation");
        jMenuItemTransformationLineaireSaturation.setToolTipText("");
        jMenuItemTransformationLineaireSaturation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTransformationLineaireSaturationActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuItemTransformationLineaireSaturation);

        jMenuItemCorrectionGamma.setText("Correction gamma");
        jMenuItemCorrectionGamma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCorrectionGammaActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuItemCorrectionGamma);

        jMenuItemNegatif.setText("NÃ©gatif");
        jMenuItemNegatif.setToolTipText("");
        jMenuItemNegatif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNegatifActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuItemNegatif);

        jMenuItemEgalisationHistogramme.setText("Ãgalisation de lâhistogramme");
        jMenuItemEgalisationHistogramme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEgalisationHistogrammeActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuItemEgalisationHistogramme);

        jMenuBar1.add(jMenuHistogramme);

        jMenuFiltrageLineaire.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/vector.png"))); // NOI18N
        jMenuFiltrageLineaire.setText("Transformation Lineaire");

        jMenuGlobal.setText("Global");

        jMenuItemPasseBasIdeal.setText("Passe-bas ideal");
        jMenuItemPasseBasIdeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPasseBasIdealActionPerformed(evt);
            }
        });
        jMenuGlobal.add(jMenuItemPasseBasIdeal);

        jMenuItemPasseHautIdeal.setText("Passe-haut ideal");
        jMenuItemPasseHautIdeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPasseHautIdealActionPerformed(evt);
            }
        });
        jMenuGlobal.add(jMenuItemPasseHautIdeal);

        jMenuItemPasseBasButterworth.setText("Passe-bas Butterworth");
        jMenuItemPasseBasButterworth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPasseBasButterworthActionPerformed(evt);
            }
        });
        jMenuGlobal.add(jMenuItemPasseBasButterworth);

        jMenuItemPasseHautButterworth.setText("Passe-haut Butterworth");
        jMenuItemPasseHautButterworth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPasseHautButterworthActionPerformed(evt);
            }
        });
        jMenuGlobal.add(jMenuItemPasseHautButterworth);

        jMenuFiltrageLineaire.add(jMenuGlobal);

        jMenu1.setText("Local");

        jMenuItem1.setText("Convolution");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuConvolution(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setActionCommand("Moyenneur");
        jMenuItem2.setLabel("Moyenneur");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuMoyenneurActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuFiltrageLineaire.add(jMenu1);

        jMenuBar1.add(jMenuFiltrageLineaire);

        jMenuFiltrageNonLineaire.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/non-linear-icon.png"))); // NOI18N
        jMenuFiltrageNonLineaire.setText("Transformation Non-LinÃ©aire");

        jMenuMorphoElementaire.setText("Elementaire");

        jMenuItemErosion.setText("Erosion");
        jMenuItemErosion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemErosionActionPerformed(evt);
            }
        });
        jMenuMorphoElementaire.add(jMenuItemErosion);

        jMenuItemDilatation.setText("Dilatation");
        jMenuItemDilatation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDilatationActionPerformed(evt);
            }
        });
        jMenuMorphoElementaire.add(jMenuItemDilatation);

        jMenuItemOuverture.setText("Ouverture");
        jMenuItemOuverture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvertureActionPerformed(evt);
            }
        });
        jMenuMorphoElementaire.add(jMenuItemOuverture);

        jMenuItemFermeture.setText("Fermeture");
        jMenuItemFermeture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFermetureActionPerformed(evt);
            }
        });
        jMenuMorphoElementaire.add(jMenuItemFermeture);

        jMenuFiltrageNonLineaire.add(jMenuMorphoElementaire);

        jMenuMorphoComplexe.setText("Complexe");

        jMenuItemDilatationGeo.setText("Dilatation Geodesique");
        jMenuItemDilatationGeo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDilatationGeoActionPerformed(evt);
            }
        });
        jMenuMorphoComplexe.add(jMenuItemDilatationGeo);

        jMenuItemReconstructionGeo.setText("Reconstruction Geodesique");
        jMenuItemReconstructionGeo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReconstructionGeoActionPerformed(evt);
            }
        });
        jMenuMorphoComplexe.add(jMenuItemReconstructionGeo);

        jMenuItemFiltreMedian.setText("Filtre Median");
        jMenuItemFiltreMedian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltreMedianActionPerformed(evt);
            }
        });
        jMenuMorphoComplexe.add(jMenuItemFiltreMedian);

        jMenuFiltrageNonLineaire.add(jMenuMorphoComplexe);

        jMenuBar1.add(jMenuFiltrageNonLineaire);

        jMenuContours.setText("Contours");
        jMenuContours.setToolTipText("");

        jMenuContoursLineaire.setText("LinÃ©aire");
        jMenuContoursLineaire.setToolTipText("");

        jMenuItemGradientPrewitt.setText("Gradient de Prewitt");
        jMenuItemGradientPrewitt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGradientPrewittActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuItemGradientPrewitt);

        jMenuItemGradientSobel.setText("Gradient de Sobel");
        jMenuItemGradientSobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGradientSobelActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuItemGradientSobel);

        jMenuItemLaplacien4.setText("Laplacien 4");
        jMenuItemLaplacien4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLaplacien4ActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuItemLaplacien4);

        jMenuItemLaplacien8.setText("Laplacien 8");
        jMenuItemLaplacien8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLaplacien8ActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuItemLaplacien8);

        jMenuContours.add(jMenuContoursLineaire);

        jMenuContoursNonLineaire.setText("Non-LinÃ©aire");

        jMenuItemGradientErosion.setText("Gradient d'Ã©rosion");
        jMenuItemGradientErosion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGradientErosionActionPerformed(evt);
            }
        });
        jMenuContoursNonLineaire.add(jMenuItemGradientErosion);

        jMenuItemGradientDilatation.setText("Gradient de dilatation");
        jMenuItemGradientDilatation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGradientDilatationActionPerformed(evt);
            }
        });
        jMenuContoursNonLineaire.add(jMenuItemGradientDilatation);

        jMenuItemGradientBeucher.setText("Gradient de Beucher");
        jMenuItemGradientBeucher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGradientBeucherActionPerformed(evt);
            }
        });
        jMenuContoursNonLineaire.add(jMenuItemGradientBeucher);

        jMenuItemLaplacienNonLin.setText("Laplacien non-linÃ©aire");
        jMenuItemLaplacienNonLin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLaplacienNonLinActionPerformed(evt);
            }
        });
        jMenuContoursNonLineaire.add(jMenuItemLaplacienNonLin);

        jMenuContours.add(jMenuContoursNonLineaire);

        jMenuBar1.add(jMenuContours);

        jMenuSeuillage.setText("Seuillage");

        jMenuItemSeuillageSimple.setText("Seuillage simple");
        jMenuItemSeuillageSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSeuillageSimpleActionPerformed(evt);
            }
        });
        jMenuSeuillage.add(jMenuItemSeuillageSimple);

        jMenuItemSeuillageDouble.setText("Seuillage double");
        jMenuItemSeuillageDouble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSeuillageDoubleActionPerformed(evt);
            }
        });
        jMenuSeuillage.add(jMenuItemSeuillageDouble);

        jMenuItemSeuillageAutomatique.setText("Seuillage automatique");
        jMenuItemSeuillageAutomatique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSeuillageAutomatiqueActionPerformed(evt);
            }
        });
        jMenuSeuillage.add(jMenuItemSeuillageAutomatique);

        jMenuBar1.add(jMenuSeuillage);

        jMenuApplications.setText("Applications");

        jMenuItemApplication1.setText("Application 1");
        jMenuItemApplication1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemApplication1ActionPerformed(evt);
            }
        });
        jMenuApplications.add(jMenuItemApplication1);

        jMenuItemApplication2.setText("Application 2");
        jMenuItemApplication2.setToolTipText("");
        jMenuItemApplication2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemApplication2ActionPerformed(evt);
            }
        });
        jMenuApplications.add(jMenuItemApplication2);

        jMenuItemApplication3.setText("Application 3");
        jMenuItemApplication3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemApplication3ActionPerformed(evt);
            }
        });
        jMenuApplications.add(jMenuItemApplication3);

        jMenuItemApplication4.setText("Application 4");
        jMenuItemApplication4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemApplication4ActionPerformed(evt);
            }
        });
        jMenuApplications.add(jMenuItemApplication4);

        jMenuItemApplication5.setText("Application 5");
        jMenuItemApplication5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemApplication5ActionPerformed(evt);
            }
        });
        jMenuApplications.add(jMenuItemApplication5);

        jMenuItemApplication6.setText("Application 6");
        jMenuItemApplication6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemApplication6ActionPerformed(evt);
            }
        });
        jMenuApplications.add(jMenuItemApplication6);

        jMenuItemApplication7.setText("Application 7");
        jMenuItemApplication7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemApplication7ActionPerformed(evt);
            }
        });
        jMenuApplications.add(jMenuItemApplication7);

        jMenuBar1.add(jMenuApplications);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1217, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(1229, 528));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuHistogrammeAfficherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeAfficherActionPerformed
        int histo[];
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            histo = Histogramme.Histogramme256(f_int);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
            return;
        }
        
        // Crï¿½ation du dataset
        XYSeries serie = new XYSeries("Histo");
        for(int i=0 ; i<256 ; i++) serie.add(i,histo[i]);
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(serie);
        
        // Creation du chart
        JFreeChart chart = ChartFactory.createHistogram("Histogramme","Niveaux de gris","Nombre de pixels",dataset,PlotOrientation.VERTICAL,false,false,false);

        XYPlot plot = (XYPlot)chart.getXYPlot();
        ValueAxis axeX = plot.getDomainAxis();
        axeX.setRange(0,255);
        plot.setDomainAxis(axeX);
        
        // creation d'une frame
        ChartFrame frame = new ChartFrame("Histogramme de l'image",chart);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_jMenuHistogrammeAfficherActionPerformed

    private void activeMenusNG()
    {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(true);
        jMenuHistogramme.setEnabled(true);
    }
    
    private void activeMenusRGB()
    {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);
    }
    
    private void jCheckBoxMenuItemDessinerCerclePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerCerclePlein.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(true);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed

    private void jCheckBoxMenuItemDessinerCercleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCercleActionPerformed
        if (!jCheckBoxMenuItemDessinerCercle.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(true);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCercleActionPerformed

    private void jMenuItemFourierAfficherPartieImaginaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieImaginaire[][] = fourier.getPartieImaginaire();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,partieImaginaire,"Fourier : Affichage de la partie imaginaire");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed

    private void jMenuItemFourierAfficherPartieReelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieReelleActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieReelle[][] = fourier.getPartieReelle();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,partieReelle,"Fourier : Affichage de la partie reelle");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPartieReelleActionPerformed

    private void jMenuItemFourierAfficherPhaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPhaseActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double phase[][] = fourier.getPhase();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,phase,"Fourier : Affichage de la phase");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPhaseActionPerformed

    private void jMenuItemFourierAfficherModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherModuleActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double module[][] = fourier.getModule();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,module,"Fourier : Affichage du module");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherModuleActionPerformed

    private void jCheckBoxMenuItemDessinerPixelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerPixelActionPerformed
        if (!jCheckBoxMenuItemDessinerPixel.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(true);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.CLIC);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerPixelActionPerformed

    private void jMenuItemEnregistrerSousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEnregistrerSousActionPerformed
        JFileChooser choix = new JFileChooser();
	File fichier;
			
	choix.setCurrentDirectory(new File ("."));
	if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
	{
            fichier = choix.getSelectedFile();
            if (fichier != null)
            {
                try 
                {
                    if (imageRGB != null) imageRGB.enregistreFormatPNG(fichier);
                    if (imageNG != null) imageNG.enregistreFormatPNG(fichier);
                } 
                catch (IOException ex) 
                {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
	}
    }//GEN-LAST:event_jMenuItemEnregistrerSousActionPerformed

    private void jMenuItemOuvrirNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirNGActionPerformed
        JFileChooser choix = new JFileChooser();
	File fichier;
			
	choix.setCurrentDirectory(new File ("."));
	if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
	{
            fichier = choix.getSelectedFile();
            if (fichier != null)
            {
                try 
                {
                    imageNG = new CImageNG(fichier);
                    observer.setCImage(imageNG);
                    imageRGB = null;
                    activeMenusNG();
                } 
                catch (IOException ex) 
                {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
	}
    }//GEN-LAST:event_jMenuItemOuvrirNGActionPerformed

    private void jMenuItemNouvelleNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleNGActionPerformed
        JDialogNouvelleCImageNG dialog = new JDialogNouvelleCImageNG(this,true);
        dialog.setVisible(true);
        imageNG = dialog.getCImageNG();
        observer.setCImage(imageNG);
        imageRGB = null;
        activeMenusNG();
    }//GEN-LAST:event_jMenuItemNouvelleNGActionPerformed

    private void jMenuItemCouleurPinceauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCouleurPinceauActionPerformed
        if (imageRGB != null)
        {
            Color newC = JColorChooser.showDialog(this,"Couleur du pinceau",couleurPinceauRGB);
            if (newC != null) couleurPinceauRGB = newC;
            observer.setCouleurPinceau(couleurPinceauRGB);
        }
        
        if (imageNG != null)
        {
            JDialogChoixCouleurNG dialog = new JDialogChoixCouleurNG(this,true,couleurPinceauNG);
            dialog.setVisible(true);
            couleurPinceauNG = dialog.getCouleur();
        }
    }//GEN-LAST:event_jMenuItemCouleurPinceauActionPerformed

    private void jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerRectanglePlein.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(true);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed

    private void jCheckBoxMenuItemDessinerRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed
        if (!jCheckBoxMenuItemDessinerRectangle.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(true);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed

    private void jCheckBoxMenuItemDessinerLigneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerLigneActionPerformed
        if (!jCheckBoxMenuItemDessinerLigne.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(true);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_LIGNE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerLigneActionPerformed

    private void jMenuItemNouvelleRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleRGBActionPerformed
        JDialogNouvelleCImageRGB dialog = new JDialogNouvelleCImageRGB(this,true);
        dialog.setVisible(true);
        imageRGB = dialog.getCImageRGB();
        observer.setCImage(imageRGB);
        imageNG = null;
        activeMenusRGB();
    }//GEN-LAST:event_jMenuItemNouvelleRGBActionPerformed

    private void jMenuQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuQuitterActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuQuitterActionPerformed

    private void jMenuItemOuvrirRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirRGBActionPerformed
        JFileChooser choix = new JFileChooser();
	File fichier;
			
	choix.setCurrentDirectory(new File ("."));
	if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
	{
            fichier = choix.getSelectedFile();
            if (fichier != null)
            {
                try 
                {
                    imageRGB = new CImageRGB(fichier);
                    observer.setCImage(imageRGB);
                    imageNG = null;
                    activeMenusRGB();
                } 
                catch (IOException ex) 
                {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
	}
    }//GEN-LAST:event_jMenuItemOuvrirRGBActionPerformed

    private void jMenuItemPasseBasButterworthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPasseBasButterworthActionPerformed
        try {
            // VÃ©rifier que l'image en niveaux de gris est chargÃ©e
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Demander la frÃ©quence de coupure
            String input = JOptionPane.showInputDialog(this, "FrÃ©quence de coupure :");
            if (input == null) return; // AnnulÃ©
            int fc = Integer.parseInt(input);
            String ordre = JOptionPane.showInputDialog(this, "Ordre du filtre :");
            if (ordre == null) return; // AnnulÃ©
            int intOrdre = Integer.parseInt(ordre);
            var img = imageNG.getMatrice();
            int[][] matriceFiltree = FiltrageLineaireGlobal.filtrePasseBasButterworth(img, fc, intOrdre);
            CImageNG imagefiltree = new CImageNG(matriceFiltree);
            observer.setCImage(imagefiltree);
            // Appel au traitement (Ã  adapter Ã  ton systÃ¨me dâimage)
            //int[][] resultat = FiltrageLineaireGlobal.filtrePasseBasIdeal(imageActuelle, fc);
            //afficherImage(resultat);
        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }           
    }//GEN-LAST:event_jMenuItemPasseBasButterworthActionPerformed

    private void jMenuItemPasseHautButterworthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPasseHautButterworthActionPerformed
        try {
            // VÃ©rifier que l'image en niveaux de gris est chargÃ©e
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Demander la frÃ©quence de coupure
            String input = JOptionPane.showInputDialog(this, "FrÃ©quence de coupure :");
            if (input == null) return; // AnnulÃ©
            int fc = Integer.parseInt(input);
            String ordre = JOptionPane.showInputDialog(this, "Ordre du filtre :");
            if (ordre == null) return; // AnnulÃ©
            int intOrdre = Integer.parseInt(ordre);
            var img = imageNG.getMatrice();
            int[][] matriceFiltree = FiltrageLineaireGlobal.filtrePasseHautButterworth(img, fc, intOrdre);
            CImageNG imagefiltree = new CImageNG(matriceFiltree);
            observer.setCImage(imagefiltree);
            // Appel au traitement (Ã  adapter Ã  ton systÃ¨me dâimage)
            //int[][] resultat = FiltrageLineaireGlobal.filtrePasseBasIdeal(imageActuelle, fc);
            //afficherImage(resultat);
        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }       
    }//GEN-LAST:event_jMenuItemPasseHautButterworthActionPerformed

    private void jMenuItemPasseBasIdealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPasseBasIdealActionPerformed
        try {
            // VÃ©rifier que l'image en niveaux de gris est chargÃ©e
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Demander la frÃ©quence de coupure
            String input = JOptionPane.showInputDialog(this, "FrÃ©quence de coupure :");
            if (input == null) return; // AnnulÃ©
            int fc = Integer.parseInt(input);
            var img = imageNG.getMatrice();
            int[][] matriceFiltree = FiltrageLineaireGlobal.filtrePasseBasIdeal(img, fc);
            CImageNG imagefiltree = new CImageNG(matriceFiltree);
            observer.setCImage(imagefiltree);
            // Appel au traitement (Ã  adapter Ã  ton systÃ¨me dâimage)
            //int[][] resultat = FiltrageLineaireGlobal.filtrePasseBasIdeal(imageActuelle, fc);
            //afficherImage(resultat);
        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemPasseBasIdealActionPerformed

    private void jMenuItemPasseHautIdealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPasseHautIdealActionPerformed
        try {
            // VÃ©rifier que l'image en niveaux de gris est chargÃ©e
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Demander la frÃ©quence de coupure
            String input = JOptionPane.showInputDialog(this, "FrÃ©quence de coupure :");
            if (input == null) return; // AnnulÃ©
            int fc = Integer.parseInt(input);
            var img = imageNG.getMatrice();
            int[][] matriceFiltree = FiltrageLineaireGlobal.filtrePasseHautIdeal(img, fc);
            CImageNG imagefiltree = new CImageNG(matriceFiltree);
            observer.setCImage(imagefiltree);
            // Appel au traitement (Ã  adapter Ã  ton systÃ¨me dâimage)
            //int[][] resultat = FiltrageLineaireGlobal.filtrePasseBasIdeal(imageActuelle, fc);
            //afficherImage(resultat);
        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemPasseHautIdealActionPerformed

    private void jMenuConvolution(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuConvolution
        try {
            // VÃ©rifier que l'image en niveaux de gris est chargÃ©e
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Demander la taille du masque
            String input = JOptionPane.showInputDialog(this, "Taille du masque (impaire):");
            if (input == null) return;
            int tailleMasque = Integer.parseInt(input);

            // VÃ©rifier que la taille est impaire
            if (tailleMasque % 2 == 0) {
                JOptionPane.showMessageDialog(this, "La taille du masque doit Ãªtre impaire!", 
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int[][] img = imageNG.getMatrice();

            // On crÃ©e le masque de taille nxn
            double[][] masque = new double[tailleMasque][tailleMasque];
            double valeur = 1.0 / (tailleMasque * tailleMasque);

            for (int i = 0; i < tailleMasque; i++) {
                for (int j = 0; j < tailleMasque; j++) {
                    masque[i][j] = valeur;
                }
            }

            // Appliquer le filtre
            int[][] matriceFiltree = FiltrageLineaireLocal.filtreMasqueConvolution(img, masque);
            CImageNG imageFiltree = new CImageNG(matriceFiltree);
            observer.setCImage(imageFiltree);
            imageNG = imageFiltree;

        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Valeur numÃ©rique invalide!", 
                    "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuConvolution

    private void jMenuMoyenneurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuMoyenneurActionPerformed
        try {
            // VÃ©rifier que l'image en niveaux de gris est chargÃ©e
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Demander la taille du masque
            String input = JOptionPane.showInputDialog(this, "Taille du masque (nombre impair):", "3");
            if (input == null) {
                return;
            }
            int tailleMasque = Integer.parseInt(input);
            if (tailleMasque % 2 == 0) {
                JOptionPane.showMessageDialog(this, "La taille du masque doit Ãªtre impaire.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();

            // Appliquer le filtre moyenneur
            int[][] matriceFiltree = FiltrageLineaireLocal.filtreMoyenneur(img, tailleMasque);
            CImageNG imageFiltree = new CImageNG(matriceFiltree);
            observer.setCImage(imageFiltree);
            imageNG = imageFiltree;

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Valeur numÃ©rique invalide!",
                    "Erreur", JOptionPane.ERROR_MESSAGE);
        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuMoyenneurActionPerformed

    private void jMenuItemErosionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemErosionActionPerformed
        // TODO add your handling code here:
        try {
            // VÃ©rifier que l'image en niveaux de gris est chargÃ©e
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Demander la taille du masque
            String input = JOptionPane.showInputDialog(this, "Taille du masque (nombre impair):", "3");
            if (input == null) {
                return;
            }
            int tailleMasque = Integer.parseInt(input);
            if (tailleMasque % 2 == 0) {
                JOptionPane.showMessageDialog(this, "La taille du masque doit Ãªtre impaire.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();

            // Appliquer l'erosion
            int[][] matriceErodee = MorphoElementaire.erosion(img, tailleMasque);
            CImageNG imageFiltree = new CImageNG(matriceErodee);
            observer.setCImage(imageFiltree);
            imageNG = imageFiltree;

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Valeur numÃ©rique invalide!",
                    "Erreur", JOptionPane.ERROR_MESSAGE);
        } 
        catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemErosionActionPerformed

    private void jMenuItemDilatationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDilatationActionPerformed
    try {
            // VÃ©rifier que l'image en niveaux de gris est chargÃ©e
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Demander la taille du masque
            String input = JOptionPane.showInputDialog(this, "Taille du masque (nombre impair):", "3");
            if (input == null) {
                return;
            }
            int tailleMasque = Integer.parseInt(input);
            if (tailleMasque % 2 == 0) {
                JOptionPane.showMessageDialog(this, "La taille du masque doit Ãªtre impaire.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();

            // Appliquer l'erosion
            int[][] matriceDilatee = MorphoElementaire.dilatation(img, tailleMasque);
            CImageNG imageFiltree = new CImageNG(matriceDilatee);
            observer.setCImage(imageFiltree);
            imageNG = imageFiltree;

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Valeur numÃ©rique invalide!",
                    "Erreur", JOptionPane.ERROR_MESSAGE);
        } 
        catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemDilatationActionPerformed

    private void jMenuItemOuvertureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvertureActionPerformed
        try {
            // VÃ©rifier que l'image en niveaux de gris est chargÃ©e
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Demander la taille du masque
            String input = JOptionPane.showInputDialog(this, "Taille du masque (nombre impair):", "3");
            if (input == null) {
                return;
            }
            int tailleMasque = Integer.parseInt(input);
            if (tailleMasque % 2 == 0) {
                JOptionPane.showMessageDialog(this, "La taille du masque doit Ãªtre impaire.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();

            // Appliquer l'erosion
            int[][] matriceOuverte = MorphoElementaire.ouverture(img, tailleMasque);
            CImageNG imageFiltree = new CImageNG(matriceOuverte);
            observer.setCImage(imageFiltree);
            imageNG = imageFiltree;

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Valeur numÃ©rique invalide!",
                    "Erreur", JOptionPane.ERROR_MESSAGE);
        } 
        catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemOuvertureActionPerformed

    private void jMenuItemFermetureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFermetureActionPerformed
    try {
            // VÃ©rifier que l'image en niveaux de gris est chargÃ©e
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Demander la taille du masque
            String input = JOptionPane.showInputDialog(this, "Taille du masque (nombre impair):", "3");
            if (input == null) {
                return;
            }
            int tailleMasque = Integer.parseInt(input);
            if (tailleMasque % 2 == 0) {
                JOptionPane.showMessageDialog(this, "La taille du masque doit Ãªtre impaire.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();

            // Appliquer l'erosion
            int[][] matriceFermee = MorphoElementaire.fermeture(img, tailleMasque);
            CImageNG imageFiltree = new CImageNG(matriceFermee);
            observer.setCImage(imageFiltree);
            imageNG = imageFiltree;

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Valeur numÃ©rique invalide!",
                    "Erreur", JOptionPane.ERROR_MESSAGE);
        } 
        catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemFermetureActionPerformed

    private void jMenuItemFiltreMedianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFiltreMedianActionPerformed
        try {
            // VÃ©rifier que l'image en niveaux de gris est chargÃ©e
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Demander la taille du masque
            String input = JOptionPane.showInputDialog(this, "Taille du masque (nombre impair):", "3");
            if (input == null) {
                return;
            }
            int tailleMasque = Integer.parseInt(input);
            if (tailleMasque % 2 == 0) {
                JOptionPane.showMessageDialog(this, "La taille du masque doit Ãªtre impaire.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();
            if (Utils.isBinary(img)){
                JOptionPane.showMessageDialog(this, "L'image ne doit pas Ãªtre binaire.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Appliquer l'erosion
            int[][] matriceFermee = MorphoComplexe.filtreMedian(img, tailleMasque);
            CImageNG imageFiltree = new CImageNG(matriceFermee);
            observer.setCImage(imageFiltree);
            imageNG = imageFiltree;

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Valeur numÃ©rique invalide!",
                    "Erreur", JOptionPane.ERROR_MESSAGE);
        } 
        catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemFiltreMedianActionPerformed

    private void jMenuItemDilatationGeoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDilatationGeoActionPerformed
    JFileChooser choix = new JFileChooser();
    File fichier;

    choix.setCurrentDirectory(new File("."));
    if (choix.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
        fichier = choix.getSelectedFile();
        if (fichier != null) {
            try {
                // Chargement de l'image en tant que masque gÃ©odÃ©sique
                CImageNG imageMasqueGeodesique = new CImageNG(fichier);

                // VÃ©rification que le masque est de la mÃªme taille que lâimage de base
                if (imageNG == null) {
                    JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image principale.");
                    imageMasqueGeodesique = null;
                    return;
                }

                if (imageMasqueGeodesique.getLargeur() != imageNG.getLargeur()
                    || imageMasqueGeodesique.getHauteur() != imageNG.getHauteur()) {
                    JOptionPane.showMessageDialog(this, "Le masque gÃ©odÃ©sique doit avoir la mÃªme taille que lâimage de base.");
                    imageMasqueGeodesique = null;
                    return;
                }

                // Confirmation
                if (imageNG != null && imageMasqueGeodesique != null) {
                int[][] imageMat = imageNG.getMatrice();
                int[][] masqueMat = imageMasqueGeodesique.getMatrice();
                String input = JOptionPane.showInputDialog(this, "Nombre d'itÃ©rations", "3");
                if (input == null) {
                    return;
                }
                int nbIter = Integer.parseInt(input);
                int[][] resultat = MorphoComplexe.dilatationGeodesique(imageMat, masqueMat, nbIter);

                // CrÃ©er une nouvelle CImageNG et l'afficher
                CImageNG resultatImage = new CImageNG(resultat);
                observer.setCImage(resultatImage);
}


            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Erreur lors du chargement du masque : " + ex.getMessage());
            } catch (CImageNGException ex) {
                Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    }//GEN-LAST:event_jMenuItemDilatationGeoActionPerformed

    private void jMenuItemReconstructionGeoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemReconstructionGeoActionPerformed
    JFileChooser choix = new JFileChooser();
    File fichier;

    choix.setCurrentDirectory(new File("."));
    if (choix.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
        fichier = choix.getSelectedFile();
        if (fichier != null) {
            try {
                // Chargement de l'image en tant que masque gÃ©odÃ©sique
                CImageNG imageMasqueGeodesique = new CImageNG(fichier);

                // VÃ©rification que le masque est de la mÃªme taille que lâimage de base
                if (imageNG == null) {
                    JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image principale.");
                    imageMasqueGeodesique = null;
                    return;
                }

                if (imageMasqueGeodesique.getLargeur() != imageNG.getLargeur()
                    || imageMasqueGeodesique.getHauteur() != imageNG.getHauteur()) {
                    JOptionPane.showMessageDialog(this, "Le masque gÃ©odÃ©sique doit avoir la mÃªme taille que lâimage de base.");
                    imageMasqueGeodesique = null;
                    return;
                }

                // Confirmation
                if (imageNG != null && imageMasqueGeodesique != null) {
                int[][] imageMat = imageNG.getMatrice();
                int[][] masqueMat = imageMasqueGeodesique.getMatrice();
                int[][] resultat = MorphoComplexe.reconstructionGeodesique(imageMat, masqueMat);

                // CrÃ©er une nouvelle CImageNG et l'afficher
                CImageNG resultatImage = new CImageNG(resultat);
                observer.setCImage(resultatImage);
}


            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Erreur lors du chargement du masque : " + ex.getMessage());
            } catch (CImageNGException ex) {
                Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    }//GEN-LAST:event_jMenuItemReconstructionGeoActionPerformed

    private void jMenuItemAfficherParametresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAfficherParametresActionPerformed
        try {
            // VÃ©rifier que l'image en niveaux de gris est chargÃ©e
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();
            //RÃ©cuperer les infos
            int min = Histogramme.minimum(img);
            int max = Histogramme.maximum(img);
            int lum = Histogramme.luminance(img);
            double c1 = Histogramme.contraste1(img);
            double c2 = Histogramme.contraste2(img);
            
            String message = String.format("""
                ParamÃ¨tres de lâimage :

                Valeur minimale : %d
                Valeur maximale : %d
                Luminance : %d
                Contraste 1 (Ã©cart-type) : %.2f
                Contraste 2 (plage normalisÃ©e) : %.2f
                """, min, max, lum, c1, c2
            );
            JOptionPane.showMessageDialog(this, message, "ParamÃ¨tres de lâimage", JOptionPane.INFORMATION_MESSAGE);
        } catch (CImageNGException ex) {
                Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemAfficherParametresActionPerformed
    public void afficherHistogrammesAvantApres(int[][] avant, int[][] apres) {
        JPanel panel = new JPanel(new GridLayout(1, 2));

        ChartPanel chartPanelAvant = new ChartPanel(creerChartHistogramme(avant, "Avant"));
        ChartPanel chartPanelApres = new ChartPanel(creerChartHistogramme(apres, "AprÃ¨s"));

        panel.add(chartPanelAvant);
        panel.add(chartPanelApres);

        JFrame frame = new JFrame("Histogrammes Avant / AprÃ¨s");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setContentPane(panel);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private JFreeChart creerChartHistogramme(int[][] imageData, String titre) {
        int[] histo = Histogramme.Histogramme256(imageData);
        XYSeries serie = new XYSeries("Histo");
        for (int i = 0; i < 256; i++) serie.add(i, histo[i]);
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(serie);

        JFreeChart chart = ChartFactory.createXYLineChart(
            titre,
            "Niveaux de gris",
            "Nombre de pixels",
            dataset,
            PlotOrientation.VERTICAL,
            false, false, false
        );

        XYPlot plot = (XYPlot) chart.getXYPlot();
        plot.getDomainAxis().setRange(0, 255);
        return chart;
    }

    private void jMenuItemTransformationLineaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTransformationLineaireActionPerformed
        try {
            // VÃ©rifier que l'image en niveaux de gris est chargÃ©e
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image et les params
            int[][] avant = imageNG.getMatrice();
            int smin = Histogramme.minimum(avant);
            int smax = Histogramme.maximum(avant);
            
            // CrÃ©er la courbe tonale et l'appliquer
            int[] courbe = Histogramme.creeCourbeTonaleLineaireSaturation(smin, smax);
            int[][] apres = Histogramme.rehaussement(avant, courbe);
            
            afficherHistogrammesAvantApres(avant, apres);
            
            // CrÃ©er une nouvelle CImageNG et l'afficher
            CImageNG resultatImage = new CImageNG(apres);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
                Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemTransformationLineaireActionPerformed

    private void jMenuItemTransformationLineaireSaturationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTransformationLineaireSaturationActionPerformed
        try {
            // VÃ©rifier que l'image en niveaux de gris est chargÃ©e
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image et les params
            int[][] avant = imageNG.getMatrice();
            String sminStr = JOptionPane.showInputDialog(this, "Valeur de smin (0 Ã  255) :");
            String smaxStr = JOptionPane.showInputDialog(this, "Valeur de smax (0 Ã  255) :");

            if (sminStr == null || smaxStr == null) return; // utilisateur a annulÃ©

            int smin = Integer.parseInt(sminStr);
            int smax = Integer.parseInt(smaxStr);

            if (smin >= smax || smin < 0 || smax > 255) {
                JOptionPane.showMessageDialog(this, "Valeurs invalides pour smin/smax.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // CrÃ©er la courbe tonale et l'appliquer
            int[] courbe = Histogramme.creeCourbeTonaleLineaireSaturation(smin, smax);
            int[][] apres = Histogramme.rehaussement(avant, courbe);
            
            afficherHistogrammesAvantApres(avant, apres);
            
            // CrÃ©er une nouvelle CImageNG et l'afficher
            CImageNG resultatImage = new CImageNG(apres);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
                Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemTransformationLineaireSaturationActionPerformed

    private void jMenuItemCorrectionGammaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCorrectionGammaActionPerformed
        try {
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int[][] avant = imageNG.getMatrice();
            String gammaStr = JOptionPane.showInputDialog(this, "Valeur de gamma :");

            if (gammaStr == null) return; // utilisateur a annulÃ©

            double gamma = Double.parseDouble(gammaStr);

            if (gamma <= 0) {
                JOptionPane.showMessageDialog(this, "Gamma doit Ãªtre strictement positif.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int[] courbe = Histogramme.creeCourbeTonaleGamma(gamma);
            int[][] apres = Histogramme.rehaussement(avant, courbe);

            afficherHistogrammesAvantApres(avant, apres);

            CImageNG resultatImage = new CImageNG(apres);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "EntrÃ©e invalide pour gamma.", "Erreur", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jMenuItemCorrectionGammaActionPerformed

    private void jMenuItemNegatifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNegatifActionPerformed
        try {
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int[][] avant = imageNG.getMatrice();
            int[] courbe = Histogramme.creeCourbeTonaleNegatif();
            int[][] apres = Histogramme.rehaussement(avant, courbe);

            afficherHistogrammesAvantApres(avant, apres);

            CImageNG resultatImage = new CImageNG(apres);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemNegatifActionPerformed

    private void jMenuItemEgalisationHistogrammeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEgalisationHistogrammeActionPerformed
        try {
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int[][] avant = imageNG.getMatrice();

            int[] courbe = Histogramme.creeCourbeTonaleEgalisation(avant);
            int[][] apres = Histogramme.rehaussement(avant, courbe);
            afficherHistogrammesAvantApres(avant, apres);

            CImageNG resultatImage = new CImageNG(apres);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItemEgalisationHistogrammeActionPerformed
    private int demanderDirection(String titre) {
        String[] options = {"Horizontal", "Vertical"};
        int choix = JOptionPane.showOptionDialog(this,
                "Choisissez la direction :",
                titre,
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);

        if (choix == JOptionPane.CLOSED_OPTION) return -1;

        return (choix == 0) ? 1 : 2;
    }

    private void jMenuItemGradientPrewittActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGradientPrewittActionPerformed
        try {
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();
            int dir = demanderDirection("Gradient de Prewitt");
            int[][] resultat = ContoursLineaire.gradientPrewitt(img, dir);
            
            CImageNG resultatImage = new CImageNG(resultat);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }//GEN-LAST:event_jMenuItemGradientPrewittActionPerformed

    private void jMenuItemGradientSobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGradientSobelActionPerformed
        try {
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();
            int dir = demanderDirection("Gradient de Sobel");
            int[][] resultat = ContoursLineaire.gradientPrewitt(img, dir);
            
            CImageNG resultatImage = new CImageNG(resultat);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemGradientSobelActionPerformed

    private void jMenuItemLaplacien4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLaplacien4ActionPerformed
        try {
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();
            int[][] resultat = ContoursLineaire.laplacien4(img);
            
            CImageNG resultatImage = new CImageNG(resultat);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemLaplacien4ActionPerformed

    private void jMenuItemLaplacien8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLaplacien8ActionPerformed
        try {
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();
            int[][] resultat = ContoursLineaire.laplacien8(img);
            
            CImageNG resultatImage = new CImageNG(resultat);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemLaplacien8ActionPerformed

    private void jMenuItemGradientErosionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGradientErosionActionPerformed
        try {
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();
            int[][] resultat = ContoursNonLineaire.gradientErosion(img);
            
            CImageNG resultatImage = new CImageNG(resultat);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemGradientErosionActionPerformed

    private void jMenuItemGradientDilatationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGradientDilatationActionPerformed
        try {
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();
            int[][] resultat = ContoursNonLineaire.gradientDilatation(img);
            
            CImageNG resultatImage = new CImageNG(resultat);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemGradientDilatationActionPerformed

    private void jMenuItemGradientBeucherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGradientBeucherActionPerformed
        try {
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();
            int[][] resultat = ContoursNonLineaire.gradientBeucher(img);
            
            CImageNG resultatImage = new CImageNG(resultat);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemGradientBeucherActionPerformed

    private void jMenuItemLaplacienNonLinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLaplacienNonLinActionPerformed
        try {
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();
            int[][] resultat = ContoursNonLineaire.laplacienNonLineaire(img);
            
            CImageNG resultatImage = new CImageNG(resultat);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemLaplacienNonLinActionPerformed

    private void jMenuItemSeuillageDoubleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSeuillageDoubleActionPerformed
        try {
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();
            String seuil1Str = JOptionPane.showInputDialog(this, "Seuil 1:");
            String seuil2Str = JOptionPane.showInputDialog(this, "Seuil 2:");

            if (seuil1Str == null || seuil2Str == null) return; // utilisateur a annulÃ©

            int seuil1 = Integer.parseInt(seuil1Str);
            int seuil2 = Integer.parseInt(seuil2Str);
            int[][] resultat = Seuillage.seuillageDouble(img, seuil1, seuil2);
            
            CImageNG resultatImage = new CImageNG(resultat);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemSeuillageDoubleActionPerformed

    private void jMenuItemSeuillageSimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSeuillageSimpleActionPerformed
        try {
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();
            String seuilStr = JOptionPane.showInputDialog(this, "Seuil :");
            if (seuilStr == null) return;
            int seuil = Integer.parseInt(seuilStr);
            
            int[][] resultat = Seuillage.seuillageSimple(img, seuil);
            
            CImageNG resultatImage = new CImageNG(resultat);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemSeuillageSimpleActionPerformed

    private void jMenuItemSeuillageAutomatiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSeuillageAutomatiqueActionPerformed
        try {
            if (imageNG == null) {
                JOptionPane.showMessageDialog(this, "Veuillez d'abord charger une image en niveaux de gris.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // RÃ©cupÃ©rer la matrice de l'image
            int[][] img = imageNG.getMatrice();
            int[][] resultat = Seuillage.seuillageAutomatique(img);
            
            CImageNG resultatImage = new CImageNG(resultat);
            observer.setCImage(resultatImage);

        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemSeuillageAutomatiqueActionPerformed

    private void afficherAvantApres(String titre, CImage avant, CImage apres) {
        // CrÃ©er une nouvelle fenÃªtre (non modale)
        JFrame frame = new JFrame(titre);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new GridLayout(1, 2)); // 2 colonnes : Avant / AprÃ¨s

        // CrÃ©er les icÃ´nes
        ImageIcon iconAvant = new ImageIcon(avant.getImage());
        ImageIcon iconApres = new ImageIcon(apres.getImage());

        // CrÃ©er les labels
        JLabel labelAvant = new JLabel("Avant", JLabel.CENTER);
        JLabel labelApres = new JLabel("AprÃ¨s", JLabel.CENTER);

        JLabel imageAvant = new JLabel(iconAvant);
        JLabel imageApres = new JLabel(iconApres);

        // CrÃ©er les panneaux
        JPanel panelAvant = new JPanel(new BorderLayout());
        panelAvant.add(labelAvant, BorderLayout.NORTH);
        panelAvant.add(imageAvant, BorderLayout.CENTER);

        JPanel panelApres = new JPanel(new BorderLayout());
        panelApres.add(labelApres, BorderLayout.NORTH);
        panelApres.add(imageApres, BorderLayout.CENTER);

        // Ajouter Ã  la fenÃªtre
        frame.add(panelAvant);
        frame.add(panelApres);

        frame.pack();
        frame.setLocationRelativeTo(null); // Centre l'Ã©cran
        frame.setVisible(true); // Affiche sans bloquer l'exÃ©cution
    }


    private void jMenuItemApplication1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemApplication1ActionPerformed
        try {
            // Charger directement les fichiers depuis les chemins connus
            File fichier1 = new File("ImagesFournies/ImagesEtape5/imageBruitee1.png");
            File fichier2 = new File("ImagesFournies/ImagesEtape5/imageBruitee2.png");
            if (!fichier1.exists()) {
                JOptionPane.showMessageDialog(this, "Fichier imageBruitee1.png introuvable.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!fichier2.exists()) {
                JOptionPane.showMessageDialog(this, "Fichier imageBruitee2.png introuvable.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // CrÃ©ation de l'objet imageNG depuis les fichiers
            CImageNG image1 = new CImageNG(fichier1);
            CImageNG image2 = new CImageNG(fichier2);
            // Mise en matrices
            int[][] mat1 = image1.getMatrice();
            int[][] mat2 = image2.getMatrice();
            // Traitement
            int[][] resultat1 = Applications.application1image1(mat1);
            int[][] resultat2 = Applications.application1image2(mat2);
            // Sortie
            CImageNG resultatImage1 = new CImageNG(resultat1);
            CImageNG resultatImage2 = new CImageNG(resultat2);
            
            // Affiche les rÃ©sultats dans des fenÃªtres popups
            afficherAvantApres("Image 1 - Avant / AprÃ¨s", image1, resultatImage1);
            afficherAvantApres("Image 2 - Avant / AprÃ¨s", image2, resultatImage2);
            
        } catch (CImageNGException | IOException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemApplication1ActionPerformed

    private void jMenuItemApplication2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemApplication2ActionPerformed
        try {
            File fichier = new File("ImagesFournies/ImagesEtape5/lenaAEgaliser.jpg");
            if (!fichier.exists()) {
                JOptionPane.showMessageDialog(this, "Fichier lenaAEgaliser.jpg introuvable.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // CrÃ©ation des objets images depuis le fichier
            CImageRGB image = new CImageRGB(fichier);
            CImageNG imageNG = new CImageNG(fichier);
            // Traitement
            CImageRGB resultatA = Applications.application2a(image);
            CImageRGB resultatB = Applications.application2b(image, imageNG);
            afficherAvantApres("Traitement (a) - Avant / AprÃ¨s", image, resultatA);
            afficherAvantApres("Traitement (b) - Avant / AprÃ¨s", image, resultatB);
        } catch (IOException | CImageRGBException | CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemApplication2ActionPerformed

    private void jMenuItemApplication3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemApplication3ActionPerformed
        try {
            // Charger directement les fichiers depuis les chemins connus
            File fichier = new File("ImagesFournies/ImagesEtape5/petitsPois.png");
            if (!fichier.exists()) {
                JOptionPane.showMessageDialog(this, "Fichier petitsPois.png introuvable.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // CrÃ©ation de l'objet imageNG depuis les fichiers
            CImageRGB image = new CImageRGB(fichier);
            // Traitement
            Map<String, int[][]> resultat = Applications.application3(image);
            CImageNG imageResultatR = new CImageNG(resultat.get("R"));
            CImageNG imageResultatB = new CImageNG(resultat.get("B"));
            afficherAvantApres("Pois rouge - Avant / AprÃ¨s", image, imageResultatR);
            afficherAvantApres("Pois bleu - Avant / AprÃ¨s", image, imageResultatB);
        } catch (IOException | CImageNGException | CImageRGBException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemApplication3ActionPerformed

    private void jMenuItemApplication4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemApplication4ActionPerformed
        try {
            File fichier = new File("ImagesFournies/ImagesEtape5/balanes.png");
            if (!fichier.exists()) {
                JOptionPane.showMessageDialog(this, "Fichier balanes.png introuvable.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            CImageNG image = new CImageNG(fichier);
            int[][] matrice = image.getMatrice();
            Map<String,int[][]> res = Applications.application4(matrice);
            CImageNG gros = new CImageNG(res.get("GROS"));
            CImageNG petits = new CImageNG(res.get("PETITS"));
            afficherAvantApres("Balanes grandes", image, gros);
            afficherAvantApres("Balanes petites", image, petits);
        } catch (IOException | CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemApplication4ActionPerformed

    private void jMenuItemApplication5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemApplication5ActionPerformed
       try {
            File fichier = new File("ImagesFournies/ImagesEtape5/tools.png");
            if (!fichier.exists()) {
                JOptionPane.showMessageDialog(this, "Fichier tools.png introuvable.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            CImageNG image = new CImageNG(fichier);
            int[][] matrice = image.getMatrice();
            Map<String,int[][]> res = Applications.application5(matrice);
            CImageNG outils = new CImageNG(res.get("outils"));
            afficherAvantApres("Tools", image, outils);
        } catch (IOException | CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }                                                  
    }//GEN-LAST:event_jMenuItemApplication5ActionPerformed

    private void jMenuItemApplication6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemApplication6ActionPerformed
        try {
            File fichierVaisseaux = new File("ImagesFournies/ImagesEtape5/vaisseaux.jpg");
            File fichierPlanete = new File("ImagesFournies/ImagesEtape5/planete.jpg");

            if (!fichierVaisseaux.exists()) {
                JOptionPane.showMessageDialog(this, "Fichier vaisseaux.jpg introuvable.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!fichierPlanete.exists()) {
                JOptionPane.showMessageDialog(this, "Fichier planete.jpg introuvable.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            CImageRGB vaisseaux = new CImageRGB(fichierVaisseaux);
            CImageRGB planete = new CImageRGB(fichierPlanete);
            CImageNG vaisseauxNG = new CImageNG(fichierVaisseaux);

            int[][] matriceNG = vaisseauxNG.getMatrice();
            Map<String,CImageRGB> resultat = Applications.application6(matriceNG, vaisseaux, planete);

            afficherAvantApres("Application 6 - SynthÃ¨se", vaisseaux, resultat.get("SYN1"));
            afficherAvantApres("Application 6 - Avec contour", resultat.get("SYN1"), resultat.get("SYN2"));

        } catch (IOException | CImageRGBException | CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Erreur lors du traitement : " + ex.getMessage(),
                    "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemApplication6ActionPerformed

    private void jMenuItemApplication7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemApplication7ActionPerformed
        try {
            File fichier = new File("ImagesFournies/ImagesEtape5/Tartines.jpg");
            if (!fichier.exists()) {
                JOptionPane.showMessageDialog(this, "Fichier Tartines.jpg introuvable.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            CImageNG image = new CImageNG(fichier);
            CImageRGB imageCouleur = new CImageRGB(fichier);
            int[][] matrice = image.getMatrice();
            Map<String,CImageRGB> res = Applications.application7(matrice, imageCouleur);
      
            CImageRGB tartine = res.get("Tartines");
            afficherAvantApres("Tartines", image, tartine);
        } catch (IOException | CImageNGException | CImageRGBException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }                                           
    }//GEN-LAST:event_jMenuItemApplication7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IsilImageProcessing().setVisible(true);
            }
        });
    }

    public void ClicDetected(UnClicEvent e) 
    {
        if (jCheckBoxMenuItemDessinerPixel.isSelected())
        {   
            try 
            {
                if (imageRGB != null) 
                    imageRGB.setPixel(e.getX(),e.getY(),couleurPinceauRGB);
                if (imageNG != null) 
                    imageNG.setPixel(e.getX(),e.getY(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectLigneDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerLigne.isSelected())
        {   
            try 
            {
                if (imageRGB != null) 
                    imageRGB.DessineLigne(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null) 
                    imageNG.DessineLigne(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectRectDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerRectangle.isSelected())
        {   
            try 
            {
                if (imageRGB != null)
                    imageRGB.DessineRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.DessineRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectCercleDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerCercle.isSelected())
        {   
            try 
            {
                if (imageRGB != null)
                    imageRGB.DessineCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.DessineCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectCercleFillDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerCerclePlein.isSelected())
        {   
            try 
            {
                if (imageRGB != null)
                    imageRGB.RemplitCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.RemplitCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectRectFillDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerRectanglePlein.isSelected())
        {   
            try 
            {
                if (imageRGB != null) 
                    imageRGB.RemplitRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null) 
                    imageNG.RemplitRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupDessiner;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCercle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCerclePlein;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerLigne;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerPixel;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectangle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectanglePlein;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenuApplications;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuContours;
    private javax.swing.JMenu jMenuContoursLineaire;
    private javax.swing.JMenu jMenuContoursNonLineaire;
    private javax.swing.JMenu jMenuDessiner;
    private javax.swing.JMenu jMenuFiltrageLineaire;
    private javax.swing.JMenu jMenuFiltrageNonLineaire;
    private javax.swing.JMenu jMenuFourier;
    private javax.swing.JMenu jMenuFourierAfficher;
    private javax.swing.JMenu jMenuGlobal;
    private javax.swing.JMenu jMenuHistogramme;
    private javax.swing.JMenuItem jMenuHistogrammeAfficher;
    private javax.swing.JMenu jMenuImage;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItemApplication1;
    private javax.swing.JMenuItem jMenuItemApplication2;
    private javax.swing.JMenuItem jMenuItemApplication3;
    private javax.swing.JMenuItem jMenuItemApplication4;
    private javax.swing.JMenuItem jMenuItemApplication5;
    private javax.swing.JMenuItem jMenuItemApplication6;
    private javax.swing.JMenuItem jMenuItemApplication7;
    private javax.swing.JMenuItem jMenuItemCorrectionGamma;
    private javax.swing.JMenuItem jMenuItemCouleurPinceau;
    private javax.swing.JMenuItem jMenuItemDilatation;
    private javax.swing.JMenuItem jMenuItemDilatationGeo;
    private javax.swing.JMenuItem jMenuItemEgalisationHistogramme;
    private javax.swing.JMenuItem jMenuItemEnregistrerSous;
    private javax.swing.JMenuItem jMenuItemErosion;
    private javax.swing.JMenuItem jMenuItemFermeture;
    private javax.swing.JMenuItem jMenuItemFiltreMedian;
    private javax.swing.JMenuItem jMenuItemFourierAfficherModule;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieImaginaire;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieReelle;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPhase;
    private javax.swing.JMenuItem jMenuItemGradientBeucher;
    private javax.swing.JMenuItem jMenuItemGradientDilatation;
    private javax.swing.JMenuItem jMenuItemGradientErosion;
    private javax.swing.JMenuItem jMenuItemGradientPrewitt;
    private javax.swing.JMenuItem jMenuItemGradientSobel;
    private javax.swing.JMenuItem jMenuItemLaplacien4;
    private javax.swing.JMenuItem jMenuItemLaplacien8;
    private javax.swing.JMenuItem jMenuItemLaplacienNonLin;
    private javax.swing.JMenuItem jMenuItemNegatif;
    private javax.swing.JMenuItem jMenuItemNouvelleNG;
    private javax.swing.JMenuItem jMenuItemNouvelleRGB;
    private javax.swing.JMenuItem jMenuItemOuverture;
    private javax.swing.JMenuItem jMenuItemOuvrirNG;
    private javax.swing.JMenuItem jMenuItemOuvrirRGB;
    private javax.swing.JMenuItem jMenuItemPasseBasButterworth;
    private javax.swing.JMenuItem jMenuItemPasseBasIdeal;
    private javax.swing.JMenuItem jMenuItemPasseHautButterworth;
    private javax.swing.JMenuItem jMenuItemPasseHautIdeal;
    private javax.swing.JMenuItem jMenuItemReconstructionGeo;
    private javax.swing.JMenuItem jMenuItemSeuillageAutomatique;
    private javax.swing.JMenuItem jMenuItemSeuillageDouble;
    private javax.swing.JMenuItem jMenuItemSeuillageSimple;
    private javax.swing.JMenuItem jMenuItemTransformationLineaire;
    private javax.swing.JMenuItem jMenuItemTransformationLineaireSaturation;
    private javax.swing.JMenu jMenuMorphoComplexe;
    private javax.swing.JMenu jMenuMorphoElementaire;
    private javax.swing.JMenu jMenuNouvelle;
    private javax.swing.JMenu jMenuOuvrir;
    private javax.swing.JMenuItem jMenuQuitter;
    private javax.swing.JMenu jMenuSeuillage;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
    
}
